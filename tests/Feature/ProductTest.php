<?php

use App\Models\Product;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Http\UploadedFile;
use Tests\TestCase;

class ProductTest extends TestCase
{
    use RefreshDatabase;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->artisan('db:seed --class=RoleSeeder');
    }

    public function test_product_can_be_created()
    {
        $request = [
            'name' => 'Test product',
            'value' => '15',
            'stock' => '100',
            'image' => UploadedFile::fake()->image('test.png')
        ];

        $response = $this->post(route('product.store'), $request);

        $this->assertDatabaseHas('products',
            [
                'name' => 'Test product',
                'value' => '15',
                'stock' => '100'
            ]);

        $response->assertRedirect();
    }

    public function test_products_screen_can_be_rendered()
    {
        $user = User::factory()->create();


        $response = $this->actingAs($user)->get('/product');

        $response->assertStatus(200);
    }


    public function test_creation_products_screen_can_be_rendered()
    {
        $user = User::factory()->create();

        $response = $this->post('/login', [
            'email' => $user->email,
            'password' => 'password',
        ]);


        $response = $this->get('/product/create');

        $response->assertStatus(200);
    }

    public function test_show_products_screen_can_be_rendered()
    {
        $user = User::factory()->create();

        $product = Product::factory()->create();

        $response = $this->actingAs($user)->get(route('product.show', $product));

        $response->assertStatus(200);

    }

    public function test_edit_products_screen_can_be_rendered()
    {
        $user = User::factory()->create();

        $product = Product::factory()->create();

        $response = $this->actingAs($user)->get(route('product.edit', $product));

        $response->assertStatus(200);

    }

    public function test_products_can_be_updated()
    {
        $user = User::factory()->create();

        $product = Product::factory()->create();

        $request = [
            'name' => 'Test product',
            'value' => '15',
            'stock' => '100',
            'image' => UploadedFile::fake()->image('test.png')
        ];

        $response = $this->actingAs($user)->patch(route('product.update', $product),$request);

        $response->assertRedirect();

        $product= $product->refresh();
        $this->assertEquals($request['name'], $product->name);
    }

    public function test_products_can_be_deleted()
    {
        $product= Product::factory()->create();
        $response=$this->delete(route('product.destroy',$product));
        $response->assertRedirect();
    }
}
